# Uncomment this line to define a global platform for your project
platform :ios, '14.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
  target 'RunnerTests' do
    inherit! :search_paths
  end
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
    target.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '14.0'
      
      # ðŸ”¥ FIX ULTRA-AGRESSIF pour Xcode 16.4 + Firebase BoringSSL ðŸ”¥
      if target.name.include?('BoringSSL') || target.name.include?('grpc') || target.name.include?('gRPC') || target.name.include?('Firebase')
        puts "ðŸ”§ Fixing #{target.name} for Xcode 16.4 compatibility..."
        
        # DÃ©sactiver TOUTES les optimisations
        config.build_settings['GCC_OPTIMIZATION_LEVEL'] = '0'
        config.build_settings['SWIFT_OPTIMIZATION_LEVEL'] = '-Onone'
        config.build_settings['ENABLE_BITCODE'] = 'NO'
        config.build_settings['COMPILER_INDEX_STORE_ENABLE'] = 'NO'
        
        # Supprimer tous les flags de compilation problÃ©matiques
        problematic_flags = ['-G', '-g', '-gdwarf-2', '-gdwarf-4', '-gline-tables-only']
        
        ['OTHER_CFLAGS', 'OTHER_CPPFLAGS', 'OTHER_SWIFT_FLAGS'].each do |key|
          if config.build_settings[key]
            if config.build_settings[key].is_a?(Array)
              config.build_settings[key] = config.build_settings[key].reject { |flag| 
                problematic_flags.any? { |bad_flag| flag.to_s.strip.start_with?(bad_flag) }
              }
            elsif config.build_settings[key].is_a?(String)
              problematic_flags.each do |bad_flag|
                config.build_settings[key] = config.build_settings[key].gsub(/\s*#{bad_flag}[^\s]*\s*/, ' ').strip
              end
            end
          end
        end
        
        # Forcer les paramÃ¨tres de debug simples
        config.build_settings['DEBUG_INFORMATION_FORMAT'] = 'dwarf'
        config.build_settings['ONLY_ACTIVE_ARCH'] = 'YES'
      end
      
      # Forcer les architectures pour tous les targets
      config.build_settings['ARCHS'] = 'arm64'
      config.build_settings['VALID_ARCHS'] = 'arm64'
      config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
    end
  end
end
